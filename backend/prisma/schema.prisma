generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// ========================
// Auth-related Models
// ========================


model User {
  // User info
  id                     String    @id @default(uuid())  // Internal UUID
  email                  String    @unique               // User's email
  password               String                          // Auth password
  name                   String?                         // User's name
  photo                  String?                         // User's photo

  salt                   String                          // 32-byte base64-encoded salt
  iv                     String                          // 12-byte IV (base64 or utf-8)
  encryptedVaultKey      String                          // Encrypted vault key (base64)

  // User payment info
  paid                   Boolean   @default(false)
  paymentType            String?                         // 'subscription' | 'one_time'
  paddleCustomerId       String?                         // Paddle user ID
  paddleSubscriptionId   String?                         // Only for subscription
  subscriptionStatus     String?                         // 'active', 'canceled', etc.
  paymentExpiresAt       DateTime?                       // Next billing or expiry date


  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  passwordEntries   PasswordEntry[]
  twoFAEntries      TwoFAEntry[]
  emailEntries      EmailEntry[]
  noteEntries       NoteEntry[]
}

// ========================
// Vault-related Models
// ========================

model PasswordEntry {
  id               String   @id @default(uuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name             String
  username         String
  url              String?
  encryptedSecret  String   // encrypted password (base64 or hex)
  iv               String   // iv used to encrypt this password
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model EmailEntry {
  id               String   @id @default(uuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  email            String
  username         String
  encryptedSecret  String  
  iv               String   
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model TwoFAEntry {
  id               String   @id @default(uuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title            String
  issuer           String
  accountName      String
  encryptedSecret  String   // encrypted TOTP secret
  iv               String   // iv used to encrypt the secret
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model NoteEntry {
  id               String   @id @default(uuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title            String
  encryptedSecret  String   
  iv               String   
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}